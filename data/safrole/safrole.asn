-- Syntax for Safrole protocol test vectors

SafroleModule DEFINITIONS ::= BEGIN

-- Define constants
IMPORTS validators-count, epoch-length FROM Constants;

-- Define basic types
U8 ::= INTEGER (0..255)
U32 ::= INTEGER (0..4294967295)

-- Define common types

TimeSlot ::= U32

ByteArray32 ::= OCTET STRING (SIZE(32))
OpaqueHash ::= ByteArray32

Ed25519Key ::= ByteArray32
BlsKey ::= OCTET STRING (SIZE(144))
BandersnatchKey ::= ByteArray32

EpochKeys ::= SEQUENCE (SIZE(epoch-length)) OF BandersnatchKey
TicketsBodies ::= SEQUENCE (SIZE(epoch-length)) OF TicketBody

-- Define enumerations
TicketsOrKeys ::= CHOICE {
    tickets TicketsBodies,
    keys EpochKeys 
}

-- Define structures
TicketBody ::= SEQUENCE {
    id OpaqueHash,
    attempt U8
}

ValidatorData ::= SEQUENCE {
    bandersnatch BandersnatchKey,
    ed25519 Ed25519Key,
    bls BlsKey,
    metadata OCTET STRING (SIZE(128))
}

ValidatorsData ::= SEQUENCE (SIZE(validators-count)) OF ValidatorData

TicketEnvelope ::= SEQUENCE {
    attempt U8,
    signature OCTET STRING (SIZE(784))
}

EpochMark ::= SEQUENCE {
    entropy OpaqueHash,
    validators SEQUENCE (SIZE(validators-count)) OF BandersnatchKey
}

TicketsMark ::= SEQUENCE (SIZE(epoch-length)) OF TicketBody

-- Output markers.
OutputMarks ::= SEQUENCE {
    -- New epoch signal.
    epoch-mark [0] EpochMark OPTIONAL,
    -- Tickets signal.
    tickets-mark [1] TicketsMark OPTIONAL
}

-- State relevant to Safrole protocol
State ::= SEQUENCE {
    -- Most recent block's timeslot.
    tau TimeSlot,

    -- Entropy accumulator and epochal randomness.
    eta SEQUENCE (SIZE(4)) OF OpaqueHash,

    -- Validator keys and metadata which were active in the prior epoch.
    lambda ValidatorsData,

    -- Validator keys and metadata currently active.
    kappa ValidatorsData,

    -- Validator keys for the following epoch.
    gamma-k ValidatorsData,

    -- Validator keys and metadata to be drawn from next.
    iota ValidatorsData,

    -- Sealing-key contest ticket accumulator.
    gamma-a SEQUENCE (SIZE(0..epoch-length)) OF TicketBody,

    -- Sealing-key series of the current epoch.
    gamma-s TicketsOrKeys,

    -- Bandersnatch ring commitment.
    gamma-z OCTET STRING (SIZE(144))
}

-- Safrole extrinsic
SafroleXt ::= SEQUENCE (SIZE(0..16)) OF TicketEnvelope

-- State transition function execution error.
-- Error codes **are not specified** in the the Graypaper.
-- Feel free to ignore the actual value.
CustomErrorCode ::= ENUMERATED {
    -- Timeslot value must be strictly monotonic.
    bad-slot (0),
    -- Received a ticket while in epoch's tail.
    unexpected-ticket (1),
    -- Tickets must be sorted.
    bad-ticket-order (2),
    -- Invalid ticket ring proof.
    bad-ticket-proof (3),
    -- Invalid ticket attempt value.
    bad-ticket-attempt (4),
    -- Reserved
    reserved (5),
    -- Found a ticket duplicate.
    duplicate-ticket (6)
}

-- Input for Safrole protocol.
Input ::= SEQUENCE {
    -- Current time slot (as stored within the block header)
    slot TimeSlot,
    -- Per block entropy (originated from per block entropy source VRF output)
    entropy OpaqueHash,
    -- Safrole extrinsic
    extrinsic SafroleXt,
    -- Offenders sequence
    post-offenders SEQUENCE OF Ed25519Key
}

-- Output from Safrole protocol
Output ::= CHOICE {
    -- Markers
    ok OutputMarks,
    -- Error code (not specified in the Graypaper)
    err CustomErrorCode
}

-- Safrole state transition function execution dump
TestCase ::= SEQUENCE {
    -- Input.
    input Input,
    -- Pre-execution state.
    pre-state State,
    -- Output.
    output Output,
    -- Post-execution state.
    post-state State
}

END
