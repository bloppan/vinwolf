-- Safrole STF test vectors schema

SafroleModule DEFINITIONS ::= BEGIN

IMPORTS
    TimeSlot, ValidatorsData, Entropy, EntropyBuffer,
    TicketBody, TicketsAccumulator, TicketsOrKeys, TicketsExtrinsic,
    EpochMark, TicketsMark, Ed25519Public
        FROM JamTypes;


State ::= SEQUENCE {
    -- Most recent block's timeslot.
    tau TimeSlot,
    -- Entropy accumulator and epochal randomness.
    eta EntropyBuffer,
    -- Validator keys and metadata which were active in the prior epoch.
    lambda ValidatorsData,
    -- Validator keys and metadata currently active.
    kappa ValidatorsData,
    -- Validator keys for the following epoch.
    gamma-k ValidatorsData,
    -- Validator keys and metadata to be drawn from next.
    iota ValidatorsData,
    -- Sealing-key contest ticket accumulator.
    gamma-a TicketsAccumulator,
    -- Sealing-key series of the current epoch.
    gamma-s TicketsOrKeys,
    -- Bandersnatch ring commitment.
    gamma-z OCTET STRING (SIZE(144))
}

Input ::= SEQUENCE {
    -- Current time slot (as stored within the block header)
    slot TimeSlot,
    -- Per block entropy (originated from per block entropy source VRF output)
    entropy Entropy,
    -- Tickets extrinsic
    extrinsic TicketsExtrinsic,
    -- Offenders sequence
    post-offenders SEQUENCE OF Ed25519Public
}

OutputData ::= SEQUENCE {
    -- New epoch signal.
    epoch-mark [0] EpochMark OPTIONAL,
    -- Tickets signal.
    tickets-mark [1] TicketsMark OPTIONAL
}

-- State transition function execution error.
-- Error codes **are not specified** in the the Graypaper.
-- Feel free to ignore the actual value.
ErrorCode ::= ENUMERATED {
    -- Timeslot value must be strictly monotonic.
    bad-slot (0),
    -- Received a ticket while in epoch's tail.
    unexpected-ticket (1),
    -- Tickets must be sorted.
    bad-ticket-order (2),
    -- Invalid ticket ring proof.
    bad-ticket-proof (3),
    -- Invalid ticket attempt value.
    bad-ticket-attempt (4),
    -- Reserved
    reserved (5),
    -- Found a ticket duplicate.
    duplicate-ticket (6)
}

Output ::= CHOICE {
    ok   OutputData,
    err  ErrorCode
}

TestCase ::= SEQUENCE {
    input        Input,
    pre-state    State,
    output       Output,
    post-state   State
}

END
